// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


enum Role {
  USER    // Utilisateur classique
  ADMIN   // Administrateur
  MODERATOR // Modérateur (si besoin)
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  "id","ident","type","name","latitude_deg","longitude_deg","elevation_ft","continent","iso_country","iso_region","municipality","scheduled_service","icao_code","iata_code","gps_code","local_code","home_link","wikipedia_link","keywords"


model Airport {
  id                Int     
  ident             String  @unique
  type              String
  name              String
  latitude_deg      Float
  longitude_deg     Float
  elevation_ft      Int?    // Peut être NULL
  continent         String
  iso_country       String
  iso_region        String
  municipality      String
  scheduled_service String
  icao_code         String? @unique // Peut être NULL mais doit être unique si présent
  iata_code         String? @unique
  gps_code          String?
  local_code        String?
  home_link         String?
  wikipedia_link    String?
  keywords          String?
  full_name_country String?

  @@map("airports") // Change le nom de la table en base de données si nécessaire
}

model Airline {
  id                 Int     @id @default(autoincrement()) // Identifiant unique
  name               String
  iata               String? @unique // Code IATA (peut être null et doit être unique)
  icao               String? @unique // Code ICAO (peut être null et doit être unique)
  active             Boolean?
  acceptingComplaints Boolean?
  website            String?
}


model User {
  id                String   @id @default(cuid()) // Identifiant unique
  email             String   @unique // Email unique obligatoire
  password          String   // Mot de passe hashé (bcrypt)
  createdAt         DateTime @default(now()) // Date d'inscription
  updatedAt         DateTime @updatedAt      // Date de dernière mise à jour
  role              Role     @default(USER) // Rôle avec une valeur par défaut
  travel_profile    String?  // Champ profile optionnel (peut être null)

  @@map("users") // Nom de la table en BDD
}
